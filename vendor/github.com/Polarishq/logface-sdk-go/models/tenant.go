// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tenant tenant
// swagger:model Tenant
type Tenant struct {

	// The tenant UUID
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	ID *string `json:"id"`

	// The state of the tenants indexer
	// Required: true
	IngestStatus *bool `json:"ingest_status"`

	// The label for the tenant
	// Required: true
	Label *string `json:"label"`

	// The state of the tenants search head
	// Required: true
	SearchStatus *bool `json:"search_status"`
}

// Validate validates this tenant
func (m *Tenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIngestStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSearchStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 1024); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateIngestStatus(formats strfmt.Registry) error {

	if err := validate.Required("ingest_status", "body", m.IngestStatus); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateSearchStatus(formats strfmt.Registry) error {

	if err := validate.Required("search_status", "body", m.SearchStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tenant) UnmarshalBinary(b []byte) error {
	var res Tenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
