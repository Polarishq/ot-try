// Code generated by go-swagger; DO NOT EDIT.

package context

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContextsIDParams creates a new GetContextsIDParams object
// with the default values initialized.
func NewGetContextsIDParams() *GetContextsIDParams {
	var (
		idDefault = string("_default")
	)
	return &GetContextsIDParams{
		ID: idDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContextsIDParamsWithTimeout creates a new GetContextsIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContextsIDParamsWithTimeout(timeout time.Duration) *GetContextsIDParams {
	var (
		idDefault = string("_default")
	)
	return &GetContextsIDParams{
		ID: idDefault,

		timeout: timeout,
	}
}

// NewGetContextsIDParamsWithContext creates a new GetContextsIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContextsIDParamsWithContext(ctx context.Context) *GetContextsIDParams {
	var (
		idDefault = string("_default")
	)
	return &GetContextsIDParams{
		ID: idDefault,

		Context: ctx,
	}
}

// NewGetContextsIDParamsWithHTTPClient creates a new GetContextsIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContextsIDParamsWithHTTPClient(client *http.Client) *GetContextsIDParams {
	var (
		idDefault = string("_default")
	)
	return &GetContextsIDParams{
		ID:         idDefault,
		HTTPClient: client,
	}
}

/*GetContextsIDParams contains all the parameters to send to the API endpoint
for the get contexts ID operation typically these are written to a http.Request
*/
type GetContextsIDParams struct {

	/*ID*/
	ID string
	/*TenantID
	  ID of the tenant

	*/
	TenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get contexts ID params
func (o *GetContextsIDParams) WithTimeout(timeout time.Duration) *GetContextsIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get contexts ID params
func (o *GetContextsIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get contexts ID params
func (o *GetContextsIDParams) WithContext(ctx context.Context) *GetContextsIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get contexts ID params
func (o *GetContextsIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get contexts ID params
func (o *GetContextsIDParams) WithHTTPClient(client *http.Client) *GetContextsIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get contexts ID params
func (o *GetContextsIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get contexts ID params
func (o *GetContextsIDParams) WithID(id string) *GetContextsIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get contexts ID params
func (o *GetContextsIDParams) SetID(id string) {
	o.ID = id
}

// WithTenantID adds the tenantID to the get contexts ID params
func (o *GetContextsIDParams) WithTenantID(tenantID string) *GetContextsIDParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the get contexts ID params
func (o *GetContextsIDParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetContextsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// header param tenantID
	if err := r.SetHeaderParam("tenantID", o.TenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
