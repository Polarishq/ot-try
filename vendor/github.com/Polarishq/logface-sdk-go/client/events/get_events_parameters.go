// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEventsParams creates a new GetEventsParams object
// with the default values initialized.
func NewGetEventsParams() *GetEventsParams {
	var (
		contextIDDefault = string("_default")
		countDefault     = int32(10)
		indexDefault     = int32(0)
		keywordsDefault  = string("")
		reportDefault    = string("")
		transformDefault = string("")
	)
	return &GetEventsParams{
		ContextID: &contextIDDefault,
		Count:     &countDefault,
		Index:     &indexDefault,
		Keywords:  &keywordsDefault,
		Report:    &reportDefault,
		Transform: &transformDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsParamsWithTimeout creates a new GetEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEventsParamsWithTimeout(timeout time.Duration) *GetEventsParams {
	var (
		contextIDDefault = string("_default")
		countDefault     = int32(10)
		indexDefault     = int32(0)
		keywordsDefault  = string("")
		reportDefault    = string("")
		transformDefault = string("")
	)
	return &GetEventsParams{
		ContextID: &contextIDDefault,
		Count:     &countDefault,
		Index:     &indexDefault,
		Keywords:  &keywordsDefault,
		Report:    &reportDefault,
		Transform: &transformDefault,

		timeout: timeout,
	}
}

// NewGetEventsParamsWithContext creates a new GetEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEventsParamsWithContext(ctx context.Context) *GetEventsParams {
	var (
		contextIdDefault = string("_default")
		countDefault     = int32(10)
		indexDefault     = int32(0)
		keywordsDefault  = string("")
		reportDefault    = string("")
		transformDefault = string("")
	)
	return &GetEventsParams{
		ContextID: &contextIdDefault,
		Count:     &countDefault,
		Index:     &indexDefault,
		Keywords:  &keywordsDefault,
		Report:    &reportDefault,
		Transform: &transformDefault,

		Context: ctx,
	}
}

// NewGetEventsParamsWithHTTPClient creates a new GetEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEventsParamsWithHTTPClient(client *http.Client) *GetEventsParams {
	var (
		contextIdDefault = string("_default")
		countDefault     = int32(10)
		indexDefault     = int32(0)
		keywordsDefault  = string("")
		reportDefault    = string("")
		transformDefault = string("")
	)
	return &GetEventsParams{
		ContextID:  &contextIdDefault,
		Count:      &countDefault,
		Index:      &indexDefault,
		Keywords:   &keywordsDefault,
		Report:     &reportDefault,
		Transform:  &transformDefault,
		HTTPClient: client,
	}
}

/*GetEventsParams contains all the parameters to send to the API endpoint
for the get events operation typically these are written to a http.Request
*/
type GetEventsParams struct {

	/*Cache
	  Contains the search jobID

	*/
	Cache *strfmt.Base64
	/*ContextID*/
	ContextID *string
	/*Count
	  Maximum number of entries to return. Will return fewer if there are fewer to return. Set value to -1 to get all available entries.

	*/
	Count *int32
	/*Index
	  Index of first item to return.

	*/
	Index *int32
	/*Keywords
	  Whitespace separated keywords

	*/
	Keywords *string
	/*Report
	  report aggregations

	*/
	Report *string
	/*Transform
	  event-by-event transformations

	*/
	Transform *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get events params
func (o *GetEventsParams) WithTimeout(timeout time.Duration) *GetEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events params
func (o *GetEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events params
func (o *GetEventsParams) WithContext(ctx context.Context) *GetEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events params
func (o *GetEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events params
func (o *GetEventsParams) WithHTTPClient(client *http.Client) *GetEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events params
func (o *GetEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCache adds the cache to the get events params
func (o *GetEventsParams) WithCache(cache *strfmt.Base64) *GetEventsParams {
	o.SetCache(cache)
	return o
}

// SetCache adds the cache to the get events params
func (o *GetEventsParams) SetCache(cache *strfmt.Base64) {
	o.Cache = cache
}

// WithContextID adds the contextID to the get events params
func (o *GetEventsParams) WithContextID(contextID *string) *GetEventsParams {
	o.SetContextID(contextID)
	return o
}

// SetContextID adds the contextId to the get events params
func (o *GetEventsParams) SetContextID(contextID *string) {
	o.ContextID = contextID
}

// WithCount adds the count to the get events params
func (o *GetEventsParams) WithCount(count *int32) *GetEventsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get events params
func (o *GetEventsParams) SetCount(count *int32) {
	o.Count = count
}

// WithIndex adds the index to the get events params
func (o *GetEventsParams) WithIndex(index *int32) *GetEventsParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the get events params
func (o *GetEventsParams) SetIndex(index *int32) {
	o.Index = index
}

// WithKeywords adds the keywords to the get events params
func (o *GetEventsParams) WithKeywords(keywords *string) *GetEventsParams {
	o.SetKeywords(keywords)
	return o
}

// SetKeywords adds the keywords to the get events params
func (o *GetEventsParams) SetKeywords(keywords *string) {
	o.Keywords = keywords
}

// WithReport adds the report to the get events params
func (o *GetEventsParams) WithReport(report *string) *GetEventsParams {
	o.SetReport(report)
	return o
}

// SetReport adds the report to the get events params
func (o *GetEventsParams) SetReport(report *string) {
	o.Report = report
}

// WithTransform adds the transform to the get events params
func (o *GetEventsParams) WithTransform(transform *string) *GetEventsParams {
	o.SetTransform(transform)
	return o
}

// SetTransform adds the transform to the get events params
func (o *GetEventsParams) SetTransform(transform *string) {
	o.Transform = transform
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cache != nil {

		// query param cache
		var qrCache strfmt.Base64
		if o.Cache != nil {
			qrCache = *o.Cache
		}
		qCache := qrCache.String()
		if qCache != "" {
			if err := r.SetQueryParam("cache", qCache); err != nil {
				return err
			}
		}

	}

	if o.ContextID != nil {

		// query param context_id
		var qrContextID string
		if o.ContextID != nil {
			qrContextID = *o.ContextID
		}
		qContextID := qrContextID
		if qContextID != "" {
			if err := r.SetQueryParam("context_id", qContextID); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Index != nil {

		// query param index
		var qrIndex int32
		if o.Index != nil {
			qrIndex = *o.Index
		}
		qIndex := swag.FormatInt32(qrIndex)
		if qIndex != "" {
			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}

	}

	if o.Keywords != nil {

		// query param keywords
		var qrKeywords string
		if o.Keywords != nil {
			qrKeywords = *o.Keywords
		}
		qKeywords := qrKeywords
		if qKeywords != "" {
			if err := r.SetQueryParam("keywords", qKeywords); err != nil {
				return err
			}
		}

	}

	if o.Report != nil {

		// query param report
		var qrReport string
		if o.Report != nil {
			qrReport = *o.Report
		}
		qReport := qrReport
		if qReport != "" {
			if err := r.SetQueryParam("report", qReport); err != nil {
				return err
			}
		}

	}

	if o.Transform != nil {

		// query param transform
		var qrTransform string
		if o.Transform != nil {
			qrTransform = *o.Transform
		}
		qTransform := qrTransform
		if qTransform != "" {
			if err := r.SetQueryParam("transform", qTransform); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
