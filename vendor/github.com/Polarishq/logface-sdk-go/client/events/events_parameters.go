// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Polarishq/logface-sdk-go/models"
)

// NewEventsParams creates a new EventsParams object
// with the default values initialized.
func NewEventsParams() *EventsParams {
	var (
		inputDefault = string("events")
	)
	return &EventsParams{
		Input: &inputDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewEventsParamsWithTimeout creates a new EventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEventsParamsWithTimeout(timeout time.Duration) *EventsParams {
	var (
		inputDefault = string("events")
	)
	return &EventsParams{
		Input: &inputDefault,

		timeout: timeout,
	}
}

// NewEventsParamsWithContext creates a new EventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewEventsParamsWithContext(ctx context.Context) *EventsParams {
	var (
		inputDefault = string("events")
	)
	return &EventsParams{
		Input: &inputDefault,

		Context: ctx,
	}
}

// NewEventsParamsWithHTTPClient creates a new EventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEventsParamsWithHTTPClient(client *http.Client) *EventsParams {
	var (
		inputDefault = string("events")
	)
	return &EventsParams{
		Input:      &inputDefault,
		HTTPClient: client,
	}
}

/*EventsParams contains all the parameters to send to the API endpoint
for the events operation typically these are written to a http.Request
*/
type EventsParams struct {

	/*Events*/
	Events models.Events
	/*Input*/
	Input *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the events params
func (o *EventsParams) WithTimeout(timeout time.Duration) *EventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the events params
func (o *EventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the events params
func (o *EventsParams) WithContext(ctx context.Context) *EventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the events params
func (o *EventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the events params
func (o *EventsParams) WithHTTPClient(client *http.Client) *EventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the events params
func (o *EventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEvents adds the events to the events params
func (o *EventsParams) WithEvents(events models.Events) *EventsParams {
	o.SetEvents(events)
	return o
}

// SetEvents adds the events to the events params
func (o *EventsParams) SetEvents(events models.Events) {
	o.Events = events
}

// WithInput adds the input to the events params
func (o *EventsParams) WithInput(input *string) *EventsParams {
	o.SetInput(input)
	return o
}

// SetInput adds the input to the events params
func (o *EventsParams) SetInput(input *string) {
	o.Input = input
}

// WriteToRequest writes these params to a swagger request
func (o *EventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Events); err != nil {
		return err
	}

	if o.Input != nil {

		// header param input
		if err := r.SetHeaderParam("input", *o.Input); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
