// Code generated by go-swagger; DO NOT EDIT.

package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new identity API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for identity API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAccountAPIKeysClientID deletes API key

Delete the API Key
*/
func (a *Client) DeleteAccountAPIKeysClientID(params *DeleteAccountAPIKeysClientIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountAPIKeysClientIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountAPIKeysClientIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountAPIKeysClientID",
		Method:             "DELETE",
		PathPattern:        "/account/apiKeys/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountAPIKeysClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountAPIKeysClientIDOK), nil

}

/*
GetAccount accounts represent individuals

Retrieve an account
*/
func (a *Client) GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccount",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountOK), nil

}

/*
GetAccountAPIKeys gets API keys

Retrieve the api keys for the current account
*/
func (a *Client) GetAccountAPIKeys(params *GetAccountAPIKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountAPIKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountAPIKeys",
		Method:             "GET",
		PathPattern:        "/account/apiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountAPIKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountAPIKeysOK), nil

}

/*
GetAccountAPIKeysClientID gets API key

Retrieve the api key for the current account, specified by ID
*/
func (a *Client) GetAccountAPIKeysClientID(params *GetAccountAPIKeysClientIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountAPIKeysClientIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountAPIKeysClientIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountAPIKeysClientID",
		Method:             "GET",
		PathPattern:        "/account/apiKeys/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountAPIKeysClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountAPIKeysClientIDOK), nil

}

/*
GetTenants gets tenants

Get all tenants for a user
*/
func (a *Client) GetTenants(params *GetTenantsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenants",
		Method:             "GET",
		PathPattern:        "/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTenantsOK), nil

}

/*
PostAccountAPIKeys news API key

Create a new API Key
*/
func (a *Client) PostAccountAPIKeys(params *PostAccountAPIKeysParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountAPIKeysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountAPIKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountAPIKeys",
		Method:             "POST",
		PathPattern:        "/account/apiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountAPIKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountAPIKeysCreated), nil

}

/*
PutAccount sets whether the t o s has been agreed to

Update the TOS boolean for an account
*/
func (a *Client) PutAccount(params *PutAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PutAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAccount",
		Method:             "PUT",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAccountOK), nil

}

/*
PutAccountAPIKeysClientID updates the API key

Enable/Disable the API Key
*/
func (a *Client) PutAccountAPIKeysClientID(params *PutAccountAPIKeysClientIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAccountAPIKeysClientIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccountAPIKeysClientIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAccountAPIKeysClientID",
		Method:             "PUT",
		PathPattern:        "/account/apiKeys/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAccountAPIKeysClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAccountAPIKeysClientIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
